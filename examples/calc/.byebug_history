c
data
c
data
c
data
context
s
context
c
context
content
data
s
c
n
value
c
input
ARGV
input
exit
ARGV[0]
input
c
val
pow
c
rhs
value
c
value
exit
value
exit
value
c
value
c
operations
exit
value
operations
product
c
operations
n
c
operations
c
product
n
c
value
product
operations
n
c
value
exit
11*22/3
value
operations.inject(power) {|accumulator, vv| accumulator.send(*vv)}
operations.inject(power) {|accumulator, vv| accumulator.send(*vv)}}
operations
operations.inject(power) {|op, val| power.send(op.to_sym, val)}
operations
c
operations
value
exit
operations = value.last[:_Product_1]
power
value
c
value
exit
c
value
value.map(&:values).flatten
value.map(&:values).flattent
value.map(&:values).compact
value.values.compact
value
c
value
c
value
rhs
c
rhs
exit
c
rhs
c
rhs
value
c
value
c
value
c
value
c
value
c
value
c
value
c
value
c
value
c
value
c
value
c
value
c
value
c
value
vale
c
exit
c
value
c
value
c
value
c
value
c
value
c
value
c
value
c
value
c
pow
n
c
n
c
rhs
n
c
value
exit
10.pow(2)
10.pow(1)
10.pow(10)
1.pow(10)
Math.exponent
Math.power
Math.public_methods
Math
Math.
value
c
value
c
value
c
value
exit
value
c
value
exit
c
value
c
value
c
value
c
value
c
value
c
value
c
value
c
value
exit
value
c
value
c
exit
s
input

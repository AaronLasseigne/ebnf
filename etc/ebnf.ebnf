    /* An EBNF grammar for EBNF */
    [1] ebnf        ::= (declaration | rule)*

    [2] declaration ::= '@terminals' | pass

    [3] rule        ::= LHS expression

    # Use the LHS terminal to match the identifier, rule name and assignment due to
    # confusion between the identifier and RANGE

    [4] expression  ::= alt

    [5] alt         ::= seq ('|' seq)*

    [6] seq         ::= diff+

    [7] diff        ::= postfix ('-' postfix)?

    [8] postfix     ::= primary POSTFIX?

    [9] primary     ::= HEX
                    |   SYMBOL
                    |   ENUM
                    |   O_ENUM
                    |   RANGE
                    |   O_RANGE
                    |   STRING1
                    |   STRING2
                    |   '(' expression ')'

    [10] pass       ::= '@pass' expression

    @terminals

    [11] LHS        ::= ('[' SYMBOL ']' ' '+)? SYMBOL ' '* '::='

    [12] SYMBOL     ::= ([a-z] | [A-Z] | [0-9] | '_' | '.')+

    [13] HEX        ::= '#x' ([a-f] | [A-F] | [0-9])+

    [14] ENUM       ::= ('[' (R_CHAR+ | HEX+) '-'? ']') - LHS  # exclusively R_CHAR or HEX

    [15] O_ENUM     ::= '[^' (R_CHAR+ | HEX+) '-'? ']' # both ENUM and O_ENUM can end with '-'

    [16] RANGE      ::= '[' ((R_CHAR '-' R_CHAR) | (HEX '-' HEX))+ ']'

    [17] O_RANGE    ::= '[^' ((R_CHAR '-' R_CHAR) | (HEX '-' HEX))+ ']'

    # Strings are unescaped Unicode, excepting control characters and hash (#)
    [18] STRING1    ::= '"' (CHAR - '"')* '"'

    [19] STRING2    ::= "'" (CHAR - "'")* "'"

    [20] CHAR       ::= [#x9#xA#xD] | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

    [21] R_CHAR     ::= CHAR - (']' | '-')

    [22] POSTFIX    ::= [?*+]

    # Ignore all whitespace and comments between non-terminals
    [23] PASS       ::= [#x9#xA#xD#x20]
                      | ( ('#' - '#x') | '//' ) [^#xA#xD]*
                      | '/*' (( '*' [^/] )? | [^*] )* '*/'
                      | '(*' (( '*' [^)] )? | [^*] )* '*)'

    @pass           PASS
